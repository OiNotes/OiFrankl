import { chromium } from '@playwright/test';

async function testWithLogs() {
  const browser = await chromium.launch({ 
    headless: false,
    args: ['--window-size=400,800']
  });
  const page = await browser.newPage({ viewport: { width: 400, height: 800 } });
  
  console.log('üîç –¢–µ—Å—Ç —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏\n');
  
  // –í–∫–ª—é—á–∞–µ–º –≤—Å–µ –ª–æ–≥–∏
  page.on('console', msg => {
    const text = msg.text();
    if (text.includes('[') && text.includes(']')) {
      console.log(text);
    }
  });
  
  await page.goto('http://localhost:5173');
  await page.waitForTimeout(2000);
  
  // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
  await page.evaluate(() => {
    for (let i = localStorage.length - 1; i >= 0; i--) {
      const key = localStorage.key(i);
      if (key && key.includes('frankl_user_')) {
        localStorage.removeItem(key);
      }
    }
  });
  
  await page.reload();
  await page.waitForTimeout(1000);
  
  // –ù–∞—á–∏–Ω–∞–µ–º
  await page.click('button:has-text("–ù–∞—á–∞—Ç—å")');
  await page.waitForTimeout(1000);
  await page.locator('button').filter({ hasText: '—á—Ç–µ–Ω–∏–µ' }).click();
  await page.waitForTimeout(2000);
  
  console.log('\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∞–π–∫–æ–≤\n');
  
  // –õ–∞–π–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç
  console.log('1Ô∏è‚É£ –õ–∞–π–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç');
  await page.locator('button').filter({ has: page.locator('svg[width="24"]') }).click();
  await page.waitForTimeout(1000);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
  const check1 = await page.evaluate(() => {
    const userKey = localStorage.getItem('frankl_user_key');
    const progressKey = `frankl_user_progress_${userKey}`;
    const progress = JSON.parse(localStorage.getItem(progressKey) || '{}');
    return {
      userKey,
      likes: progress.likes || []
    };
  });
  
  console.log(`\n–ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –ª–∞–π–∫–∞:`);
  console.log(`–ö–ª—é—á: ${check1.userKey}`);
  console.log(`–õ–∞–π–∫–∏: [${check1.likes.join(', ')}]`);
  
  // –ò–¥–µ–º –∫–æ –≤—Ç–æ—Ä–æ–º—É —Ñ—Ä–∞–≥–º–µ–Ω—Ç—É
  console.log('\n2Ô∏è‚É£ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫–æ –≤—Ç–æ—Ä–æ–º—É —Ñ—Ä–∞–≥–º–µ–Ω—Ç—É');
  await page.keyboard.press('ArrowUp');
  await page.waitForTimeout(1000);
  
  // –õ–∞–π–∫–∞–µ–º –≤—Ç–æ—Ä–æ–π
  console.log('–õ–∞–π–∫–∞–µ–º –≤—Ç–æ—Ä–æ–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç');
  await page.locator('button').filter({ has: page.locator('svg[width="24"]') }).click();
  await page.waitForTimeout(1000);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
  const check2 = await page.evaluate(() => {
    const userKey = localStorage.getItem('frankl_user_key');
    const progressKey = `frankl_user_progress_${userKey}`;
    const progress = JSON.parse(localStorage.getItem(progressKey) || '{}');
    return {
      likes: progress.likes || []
    };
  });
  
  console.log(`\n–ü–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–≥–æ –ª–∞–π–∫–∞:`);
  console.log(`–õ–∞–π–∫–∏: [${check2.likes.join(', ')}]`);
  
  // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
  console.log('\n3Ô∏è‚É£ –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ');
  await page.locator('button').filter({ has: page.locator('svg[width="20"]') }).first().click();
  await page.waitForTimeout(1500);
  
  const favCount = await page.locator('.space-y-4 > div').count();
  console.log(`\n–í –∏–∑–±—Ä–∞–Ω–Ω–æ–º: ${favCount} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
  
  await page.screenshot({ path: 'debug-favorites.png' });
  console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: debug-favorites.png');
  
  await browser.close();
}

testWithLogs().catch(console.error);