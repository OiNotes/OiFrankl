import { chromium } from '@playwright/test';

async function finalTest() {
  const browser = await chromium.launch({ headless: false });
  const page = await browser.newPage();
  
  console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...\n');
  
  // –ü–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥ –∫–æ–Ω—Å–æ–ª–∏
  page.on('console', msg => {
    const text = msg.text();
    if (!text.includes('[vite]') && !text.includes('React DevTools')) {
      console.log(`[CONSOLE] ${text}`);
    }
  });
  
  await page.goto('http://localhost:5173');
  await page.waitForTimeout(2000);
  
  // 1. –ù–ê–ß–ê–õ–û –ß–¢–ï–ù–ò–Ø
  console.log('\nüì± –¢–ï–°–¢ 1: –ù–∞—á–∞–ª–æ —á—Ç–µ–Ω–∏—è');
  const welcomeButton = page.locator('button:has-text("–ù–∞—á–∞—Ç—å —á—Ç–µ–Ω–∏–µ")');
  if (await welcomeButton.isVisible()) {
    await welcomeButton.click();
    await page.waitForTimeout(1000);
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á
    const keyDisplay = await page.locator('div.font-mono.text-2xl').textContent();
    console.log('‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–ª—é—á:', keyDisplay);
    
    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —á—Ç–µ–Ω–∏–µ
    await page.locator('button:has-text("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —á—Ç–µ–Ω–∏–µ")').click();
    await page.waitForTimeout(2000);
  }
  
  // 2. –ü–†–û–í–ï–†–Ø–ï–ú –¢–ï–ö–°–¢ –ò –ù–ê–í–ò–ì–ê–¶–ò–Æ
  console.log('\nüìñ –¢–ï–°–¢ 2: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞');
  const textContent = await page.locator('.text-content').first().textContent();
  if (textContent) {
    console.log('‚úÖ –¢–µ–∫—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è:', textContent.substring(0, 50) + '...');
  }
  
  // 3. –î–û–ë–ê–í–õ–Ø–ï–ú –õ–ê–ô–ö–ò
  console.log('\n‚ù§Ô∏è –¢–ï–°–¢ 3: –°–∏—Å—Ç–µ–º–∞ –ª–∞–π–∫–æ–≤');
  for (let i = 0; i < 5; i++) {
    const likeButton = page.locator('button svg[width="24"]').first();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–æ –∫–ª–∏–∫–∞
    const countBefore = await page.locator('button span.text-sm').textContent().catch(() => null);
    
    await likeButton.click();
    await page.waitForTimeout(500);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
    const countAfter = await page.locator('button span.text-sm').textContent().catch(() => null);
    
    console.log(`   –§—Ä–∞–≥–º–µ–Ω—Ç ${i + 1}: ${countBefore || '0'} ‚Üí ${countAfter || '1'} –ª–∞–π–∫–æ–≤`);
    
    // –°–≤–∞–π–ø–∞–µ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
    if (i < 4) {
      await page.keyboard.press('ArrowUp');
      await page.waitForTimeout(1000);
    }
  }
  
  // 4. –ü–†–û–í–ï–†–Ø–ï–ú –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –†–ï–ñ–ò–ú–û–í
  console.log('\nüîÑ –¢–ï–°–¢ 4: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª/–∞–Ω–∞–ª–æ–≥–∏—è');
  const textBefore = await page.locator('.text-content').first().textContent();
  await page.keyboard.press(' '); // –ü—Ä–æ–±–µ–ª –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
  await page.waitForTimeout(1000);
  const textAfter = await page.locator('.text-content').first().textContent();
  
  if (textBefore !== textAfter) {
    console.log('‚úÖ –†–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    const mode = await page.locator('text="–ê–Ω–∞–ª–æ–≥–∏—è"').isVisible() ? '–ê–Ω–∞–ª–æ–≥–∏—è' : '–û—Ä–∏–≥–∏–Ω–∞–ª';
    console.log('   –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º:', mode);
  } else {
    console.log('‚ùå –†–µ–∂–∏–º –Ω–µ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è');
  }
  
  // 5. –ü–†–û–í–ï–†–Ø–ï–ú –ò–ó–ë–†–ê–ù–ù–û–ï
  console.log('\n‚≠ê –¢–ï–°–¢ 5: –ò–∑–±—Ä–∞–Ω–Ω–æ–µ');
  await page.locator('button svg[width="20"][height="20"]').first().click(); // –ö–Ω–æ–ø–∫–∞ —Å–µ—Ä–¥–µ—á–∫–∞
  await page.waitForTimeout(1000);
  
  const likedCount = await page.locator('.space-y-4 > div').count();
  console.log(`‚úÖ –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º ${likedCount} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
  
  if (likedCount > 0) {
    // –ö–ª–∏–∫–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    await page.locator('.space-y-4 > div').first().click();
    await page.waitForTimeout(1000);
    console.log('‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–±–æ—Ç–∞–µ—Ç');
  }
  
  // 6. –ü–†–û–í–ï–†–Ø–ï–ú –°–û–•–†–ê–ù–ï–ù–ò–ï –ü–†–û–ì–†–ï–°–°–ê
  console.log('\nüíæ –¢–ï–°–¢ 6: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞');
  const currentFragment = await page.locator('text=/–§—Ä–∞–≥–º–µ–Ω—Ç \\d+ –∏–∑/').textContent();
  console.log('   –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è:', currentFragment);
  
  // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
  await page.reload();
  await page.waitForTimeout(2000);
  
  const fragmentAfterReload = await page.locator('text=/–§—Ä–∞–≥–º–µ–Ω—Ç \\d+ –∏–∑/').textContent();
  if (currentFragment === fragmentAfterReload) {
    console.log('‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ');
  }
  
  // 7. –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
  console.log('\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
  const stats = await page.evaluate(() => {
    const userKey = localStorage.getItem('frankl_user_key');
    const progressKey = `frankl_user_progress_${userKey}`;
    const progress = JSON.parse(localStorage.getItem(progressKey) || '{}');
    const globalLikes = JSON.parse(localStorage.getItem('frankl_global_likes_v2') || '{}');
    
    return {
      totalRead: progress.totalRead || 0,
      userLikes: (progress.likes || []).length,
      globalLikesCount: Object.values(globalLikes).reduce((sum, count) => sum + count, 0),
      fragmentsWithLikes: Object.keys(globalLikes).length
    };
  });
  
  console.log('   –ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤:', stats.totalRead);
  console.log('   –õ–∞–π–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', stats.userLikes);
  console.log('   –í—Å–µ–≥–æ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ª–∞–π–∫–æ–≤:', stats.globalLikesCount);
  console.log('   –§—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ —Å –ª–∞–π–∫–∞–º–∏:', stats.fragmentsWithLikes);
  
  // –î–µ–ª–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
  await page.screenshot({ path: 'final-app-state.png', fullPage: true });
  console.log('\nüì∏ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç: final-app-state.png');
  
  await page.waitForTimeout(3000);
  await browser.close();
  
  console.log('\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
  console.log('üéâ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ!');
}

finalTest().catch(console.error);