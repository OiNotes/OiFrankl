import { createClient } from '@supabase/supabase-js';

// –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
// –û—á–∏—â–∞–µ–º –∫–ª—é—á –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY?.trim();
const useLocalStorage = import.meta.env.VITE_USE_LOCAL_STORAGE === 'true';

// Debug logging for production
console.log('[Supabase Config] Environment Debug:');
console.log('  Mode:', import.meta.env.MODE);
console.log('  Is Production:', import.meta.env.PROD);
console.log('  VITE_SUPABASE_URL:', supabaseUrl ? `${supabaseUrl}` : '‚ùå NOT SET');
console.log('  VITE_SUPABASE_ANON_KEY:', supabaseAnonKey ? `${supabaseAnonKey.substring(0, 30)}...` : '‚ùå NOT SET');
console.log('  VITE_USE_LOCAL_STORAGE:', import.meta.env.VITE_USE_LOCAL_STORAGE || '‚ùå NOT SET');

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!');
  console.error('üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é:');
  console.error('1. –û—Ç–∫—Ä–æ–π—Ç–µ Vercel Dashboard: https://vercel.com/dashboard');
  console.error('2. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç ‚Üí Settings ‚Üí Environment Variables');
  console.error('3. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:');
  console.error('   - VITE_SUPABASE_URL');
  console.error('   - VITE_SUPABASE_ANON_KEY');
  console.error('   - VITE_USE_LOCAL_STORAGE (–∑–Ω–∞—á–µ–Ω–∏–µ: false)');
  console.error('4. –ü–µ—Ä–µ–¥–µ–ø–ª–æ–π—Ç–µ –ø—Ä–æ–µ–∫—Ç');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
const isSupabaseConfigured = supabaseUrl && supabaseAnonKey && !useLocalStorage;

if (useLocalStorage) {
  console.log('[Storage] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
} else {
  console.log('[Supabase Config] URL:', supabaseUrl ? 'present' : 'missing');
  console.log('[Supabase Config] Anon Key:', supabaseAnonKey ? 'present' : 'missing');
  console.log('[Supabase Config] Configured:', !!isSupabaseConfigured);
}

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
export const supabase = isSupabaseConfigured 
  ? createClient(supabaseUrl, supabaseAnonKey)
  : null;

// –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
if (supabase && import.meta.env.PROD) {
  console.log('[Supabase] Testing connection...');
  supabase
    .from('users')
    .select('count', { count: 'exact', head: true })
    .then(({ count, error }) => {
      if (error) {
        console.error('[Supabase] Connection test failed:', error);
      } else {
        console.log('[Supabase] Connection test successful! Users count:', count);
      }
    });
}

// –§–ª–∞–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export const useSupabase = isSupabaseConfigured;

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
export const migrateUserToSupabase = async (userKey) => {
  if (!supabase) {
    console.log('[migrateUserToSupabase] No Supabase client');
    return null;
  }
  
  console.log('[migrateUserToSupabase] Checking/creating user for key:', userKey);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    console.log('[migrateUserToSupabase] Attempting to select user with key:', userKey);
    const { data: existingUser, error: selectError, status, statusText } = await supabase
      .from('users')
      .select('id')
      .eq('user_key', userKey)
      .maybeSingle(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º maybeSingle –≤–º–µ—Å—Ç–æ single
    
    console.log('[migrateUserToSupabase] Response:', {
      status,
      statusText,
      data: existingUser,
      error: selectError
    });
    
    if (existingUser) {
      console.log('[migrateUserToSupabase] Found existing user:', existingUser.id);
      return existingUser.id;
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞, –Ω–æ —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞ "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ", –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –µ—ë
    if (selectError) {
      console.error('[migrateUserToSupabase] Error selecting user:', selectError);
      throw selectError;
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: newUser, error: insertError } = await supabase
      .from('users')
      .insert({ user_key: userKey })
      .select('id')
      .single();
    
    if (insertError) {
      console.error('[migrateUserToSupabase] Error creating user:', insertError);
      throw insertError;
    }
    
    console.log('[migrateUserToSupabase] Created new user:', newUser.id);
    return newUser.id;
  } catch (error) {
    console.error('[migrateUserToSupabase] Error migrating user:', error);
    return null;
  }
};

// –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
export const supabaseWrapper = {
  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
  isAvailable: () => !!supabase,
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
  async saveProgress(userId, progress) {
    if (!supabase) return false;
    
    try {
      const { error } = await supabase
        .from('reading_progress')
        .upsert({
          user_id: userId,
          current_index: progress.currentIndex,
          view_mode: progress.viewMode,
          total_read: progress.totalRead,
          read_fragments: progress.readFragments || [],
          last_read: new Date().toISOString()
        }, {
          onConflict: 'user_id'
        });
      
      return !error;
    } catch (error) {
      console.error('Error saving progress:', error);
      return false;
    }
  },
  
  async getProgress(userId) {
    if (!supabase) return null;
    
    try {
      const { data, error } = await supabase
        .from('reading_progress')
        .select('*')
        .eq('user_id', userId)
        .single();
      
      if (error) throw error;
      return data;
    } catch (error) {
      console.error('Error getting progress:', error);
      return null;
    }
  }
};