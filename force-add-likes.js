import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://nfayxrcrzsdxlwpumnwb.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5mYXl4cmNyenNkeGx3cHVtbndiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM2MDkyMDUsImV4cCI6MjA2OTE4NTIwNX0.ThWlkSh69luGZPLg_y9FOzc56qp3tvhHB8lUWhmeKvI';

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function forceAddLikes() {
  console.log('üí™ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –ª–∞–π–∫–∏...\n');
  
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const { data: users } = await supabase
    .from('users')
    .select('*')
    .order('created_at', { ascending: false })
    .limit(5);
  
  if (!users || users.length === 0) {
    console.error('‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    return;
  }
  
  console.log(`üë• –ò—Å–ø–æ–ª—å–∑—É–µ–º ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
  
  // –õ–∞–π–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
  const fragments = [1, 2, 3, 5, 7, 9, 10, 15, 20, 25];
  let successCount = 0;
  let errorCount = 0;
  
  for (const fragment of fragments) {
    for (let i = 0; i < Math.min(3, users.length); i++) {
      try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ª–∞–π–∫
        const { data: existing } = await supabase
          .from('user_likes')
          .select('*')
          .eq('user_id', users[i].id)
          .eq('fragment_id', fragment)
          .single();
        
        if (existing) {
          console.log(`‚è≠Ô∏è  –õ–∞–π–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${users[i].user_key}, —Ñ—Ä–∞–≥–º–µ–Ω—Ç ${fragment}`);
          continue;
        }
        
        // –ü—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å
        const { error } = await supabase
          .from('user_likes')
          .insert({
            user_id: users[i].id,
            fragment_id: fragment
          });
        
        if (error) {
          if (error.message.includes('global_likes')) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ global_likes - –ª–∞–π–∫ –≤—Å–µ —Ä–∞–≤–Ω–æ –¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–∏—Ç—å—Å—è
            console.log(`‚ö†Ô∏è  –õ–∞–π–∫ –¥–æ–±–∞–≤–ª–µ–Ω (—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –æ global_likes): ${users[i].user_key} ‚Üí —Ñ—Ä–∞–≥–º–µ–Ω—Ç ${fragment}`);
            successCount++;
          } else if (error.message.includes('duplicate')) {
            console.log(`‚è≠Ô∏è  –î—É–±–ª–∏–∫–∞—Ç: ${users[i].user_key} ‚Üí —Ñ—Ä–∞–≥–º–µ–Ω—Ç ${fragment}`);
          } else {
            console.error(`‚ùå –û—à–∏–±–∫–∞: ${users[i].user_key} ‚Üí —Ñ—Ä–∞–≥–º–µ–Ω—Ç ${fragment}:`, error.message);
            errorCount++;
          }
        } else {
          console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${users[i].user_key} ‚Üí —Ñ—Ä–∞–≥–º–µ–Ω—Ç ${fragment}`);
          successCount++;
        }
      } catch (e) {
        console.error(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ ${fragment}:`, e.message);
        errorCount++;
      }
    }
  }
  
  console.log(`\nüìä –ò—Ç–æ–≥–æ: ${successCount} —É—Å–ø–µ—à–Ω–æ, ${errorCount} –æ—à–∏–±–æ–∫`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ª–∞–π–∫–∏...');
  const { data: allLikes, count } = await supabase
    .from('user_likes')
    .select('*', { count: 'exact' });
  
  console.log(`üìö –í—Å–µ–≥–æ –ª–∞–π–∫–æ–≤ –≤ –±–∞–∑–µ: ${count}`);
  
  // –°—á–∏—Ç–∞–µ–º –ø–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞–º
  const likesPerFragment = {};
  if (allLikes) {
    allLikes.forEach(like => {
      likesPerFragment[like.fragment_id] = (likesPerFragment[like.fragment_id] || 0) + 1;
    });
    
    console.log('\nüìä –õ–∞–π–∫–∏ –ø–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞–º:');
    Object.entries(likesPerFragment)
      .sort((a, b) => parseInt(a[0]) - parseInt(b[0]))
      .forEach(([fragment, count]) => {
        if (count > 0) {
          console.log(`   –§—Ä–∞–≥–º–µ–Ω—Ç ${fragment}: ${count} –ª–∞–π–∫–æ–≤`);
        }
      });
  }
}

forceAddLikes();