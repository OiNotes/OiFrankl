import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://nfayxrcrzsdxlwpumnwb.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5mYXl4cmNyenNkeGx3cHVtbndiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM2MDkyMDUsImV4cCI6MjA2OTE4NTIwNX0.ThWlkSh69luGZPLg_y9FOzc56qp3tvhHB8lUWhmeKvI';

async function testSupabase() {
  console.log('üîå –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...\n');
  
  const supabase = createClient(supabaseUrl, supabaseAnonKey);
  
  // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É users
  console.log('üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É users...');
  try {
    const { data, error, status } = await supabase
      .from('users')
      .select('*')
      .limit(5);
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
      console.error('Status:', status);
      console.error('Details:', error);
    } else {
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ! –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', data.length);
      if (data.length > 0) {
        console.log('–ü—Ä–∏–º–µ—Ä—ã:', data);
      }
    }
  } catch (e) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', e);
  }
  
  // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É user_likes
  console.log('\nüìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É user_likes...');
  try {
    const { data, error, count } = await supabase
      .from('user_likes')
      .select('*', { count: 'exact' })
      .limit(10);
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    } else {
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ! –í—Å–µ–≥–æ –ª–∞–π–∫–æ–≤ –≤ –±–∞–∑–µ:', count);
      if (data.length > 0) {
        console.log('–ü—Ä–∏–º–µ—Ä—ã:', data);
      }
    }
  } catch (e) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', e);
  }
  
  // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
  console.log('\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∞–π–∫–∏ –¥–ª—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ 1-10...');
  for (let i = 1; i <= 10; i++) {
    try {
      const { count, error } = await supabase
        .from('user_likes')
        .select('*', { count: 'exact', head: true })
        .eq('fragment_id', i);
      
      if (!error && count > 0) {
        console.log(`   –§—Ä–∞–≥–º–µ–Ω—Ç ${i}: ${count} –ª–∞–π–∫–æ–≤`);
      }
    } catch (e) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ ${i}:`, e.message);
    }
  }
  
  // –¢–µ—Å—Ç 4: –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  console.log('\nüë§ –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
  const testKey = 'TEST-' + Date.now();
  try {
    const { data, error } = await supabase
      .from('users')
      .insert({ user_key: testKey })
      .select()
      .single();
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è:', error.message);
      console.error('Details:', error);
    } else {
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', data);
      
      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await supabase
        .from('users')
        .delete()
        .eq('id', data.id);
      console.log('üóëÔ∏è  –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω');
    }
  } catch (e) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', e);
  }
}

testSupabase();