import { chromium } from '@playwright/test';

async function testFinalFixed() {
  const browser = await chromium.launch({ 
    headless: false,
    args: ['--window-size=400,800']
  });
  const page = await browser.newPage({ viewport: { width: 400, height: 800 } });
  
  console.log('üéØ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ª–∞–π–∫–æ–≤\n');
  
  await page.goto('http://localhost:5173');
  await page.waitForTimeout(2000);
  
  // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
  await page.evaluate(() => {
    for (let i = localStorage.length - 1; i >= 0; i--) {
      const key = localStorage.key(i);
      if (key && key.includes('frankl_user_')) {
        localStorage.removeItem(key);
      }
    }
  });
  
  await page.reload();
  await page.waitForTimeout(1000);
  
  // –ù–∞—á–∏–Ω–∞–µ–º
  await page.click('button:has-text("–ù–∞—á–∞—Ç—å")');
  await page.waitForTimeout(1000);
  const userKey = await page.locator('div.font-mono').textContent();
  console.log(`üîë –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userKey}`);
  
  await page.locator('button').filter({ hasText: '—á—Ç–µ–Ω–∏–µ' }).click();
  await page.waitForTimeout(2000);
  
  // –õ–∞–π–∫–∞–µ–º 3 —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
  console.log('\n‚ù§Ô∏è –°—Ç–∞–≤–∏–º –ª–∞–π–∫–∏:\n');
  
  for (let i = 0; i < 3; i++) {
    const fragmentInfo = await page.locator('text=/–§—Ä–∞–≥–º–µ–Ω—Ç \\d+/').textContent();
    const text = await page.locator('.text-content').textContent();
    
    console.log(`${i + 1}. ${fragmentInfo}`);
    console.log(`   "${text.substring(0, 50)}..."`);
    
    // –°—Ç–∞–≤–∏–º –ª–∞–π–∫
    await page.locator('button').filter({ has: page.locator('svg[width="24"]') }).click();
    await page.waitForTimeout(500);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º
    const hasHeart = await page.locator('svg[fill="currentColor"]').count() > 0;
    const count = await page.locator('button span.text-sm').textContent().catch(() => '1');
    console.log(`   ‚úÖ –õ–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω (–≤—Å–µ–≥–æ ${count} –ª–∞–π–∫–æ–≤)\n`);
    
    // –°–ª–µ–¥—É—é—â–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç
    if (i < 2) {
      await page.keyboard.press('ArrowUp');
      await page.waitForTimeout(1000);
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—á–µ—Ç—á–∏–∫
  const badge = await page.locator('.absolute.-top-1.-right-1').textContent().catch(() => '0');
  console.log(`üìä –°—á–µ—Ç—á–∏–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: ${badge}`);
  
  // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
  console.log('\n‚≠ê –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ...');
  await page.locator('button').filter({ has: page.locator('svg[width="20"]') }).first().click();
  await page.waitForTimeout(1500);
  
  const favCount = await page.locator('.space-y-4 > div').count();
  console.log(`\n‚úÖ –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º ${favCount} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 3)`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç—ã
  if (favCount === 3) {
    console.log('\n–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:');
    for (let i = 0; i < 3; i++) {
      const text = await page.locator('.space-y-4 > div').nth(i).locator('.font-serif').textContent();
      console.log(`${i + 1}. "${text.substring(0, 50)}..."`);
    }
  }
  
  // –ö–ª–∏–∫–∞–µ–º –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
  console.log('\nüîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ...');
  await page.locator('.space-y-4 > div').first().click();
  await page.waitForTimeout(1000);
  
  const currentFragment = await page.locator('text=/–§—Ä–∞–≥–º–µ–Ω—Ç \\d+/').textContent();
  console.log(`‚úÖ –ü–µ—Ä–µ—à–ª–∏ –∫: ${currentFragment}`);
  
  // –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
  await page.screenshot({ path: 'final-success.png' });
  console.log('\nüì∏ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç: final-success.png');
  
  // –†–ï–ó–£–õ–¨–¢–ê–¢
  console.log('\nüèÅ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:');
  if (favCount === 3) {
    console.log('‚úÖ –í–°–ï –†–ê–ë–û–¢–ê–ï–¢ –ü–†–ê–í–ò–õ–¨–ù–û!');
    console.log('üéâ –ü—Ä–æ–±–ª–µ–º–∞ —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏ —Ä–µ—à–µ–Ω–∞!');
  } else {
    console.log(`‚ùå –û—à–∏–±–∫–∞: –æ–∂–∏–¥–∞–ª–æ—Å—å 3, –ø–æ–ª—É—á–µ–Ω–æ ${favCount}`);
  }
  
  await page.waitForTimeout(3000);
  await browser.close();
}

testFinalFixed().catch(console.error);